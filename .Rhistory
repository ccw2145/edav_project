df_org <- data %>% select(keep_cols)
skim(df_org) %>% filter(stat == "missing") %>%
arrange(desc(value)) %>% select(variable, type, value) %>% mutate(percent_missing = value *100/nrow(df_org))
data <- read.csv('~/desktop/DOHMH_New_York_City_Restaurant_Inspection_Results.csv', header =T,stringsAsFactors=FALSE, fileEncoding="latin1")
data <- read.csv('~/desktop/DOHMH_New_York_City_Restaurant_Inspection_Results.csv', header =T,stringsAsFactors=FALSE, fileEncoding="latin1")
save.image("~/EDAV/data/data.RData")
keep_cols <- c('DBA','BORO', 'ZIPCODE','CUISINE.DESCRIPTION','INSPECTION.DATE','VIOLATION.CODE','VIOLATION.DESCRIPTION','SCORE', 'GRADE','INSPECTION.TYPE')
data[data==""] <- NA
# entire dataset
df_org <- data %>% select(keep_cols)
skim(df_org) %>% filter(stat == "missing") %>%
arrange(desc(value)) %>% select(variable, type, value) %>% mutate(percent_missing = value *100/nrow(df_org))
#dev.off()
#data <- read.csv('~/desktop/DOHMH_New_York_City_Restaurant_Inspection_Results.csv', header =T,stringsAsFactors=FALSE, fileEncoding="latin1")
load('~/EDAV/data/data.RData')
keep_cols <- c('DBA','BORO', 'ZIPCODE','CUISINE.DESCRIPTION','INSPECTION.DATE','VIOLATION.CODE','VIOLATION.DESCRIPTION','SCORE', 'GRADE','INSPECTION.TYPE')
data[data==""] <- NA
# entire dataset
df_org <- data %>% select(keep_cols)
skim(df_org) %>% filter(stat == "missing") %>%
arrange(desc(value)) %>% select(variable, type, value) %>% mutate(percent_missing = value *100/nrow(df_org))
#dev.off()
#####Date######
inspecttbl$"INSPECTION.DATE"<-(as.Date(inspecttbl$'INSPECTION.DATE', "%m/%d/%Y"))
#### INSPECTION.TYPE Violation related####
# we focus on instore sanity check of the inspection#
#extra levels(as.factor(inspecttbl1$CUISINE.DESCRIPTION))
#inspecttbl%>%filter(DBA =="STARBUCKS")
# dis-regarding rows from initial inspections as grades and scores are not counted
STARBUCKS<-inspecttbl%>%filter(DBA=="STARBUCKS", GRADE!='A', INSPECTION.TYPE!='Cycle Inspection / Initial Inspection', CRITICAL.FLAG=='Critical')
knitr::opts_chunk$set(echo = TRUE)
# pre-processing
#data = read.csv("/Users/shihhuayu/Downloads/DOHMH_New_York_City_Restaurant_Inspection_Results.csv", header = TRUE)
load('~/EDAV/data/data_s.RData')
library(tidyverse)
library(gridExtra)
library(dplyr)
library(ggplot2)
keep_cols <- c('DBA', 'BORO', 'ZIPCODE','CUISINE.DESCRIPTION','INSPECTION.DATE','VIOLATION.CODE','SCORE', 'GRADE','INSPECTION.TYPE','GRADE.DATE')
df <- data %>% select(keep_cols)
# pre-processing
#data = read.csv("/Users/shihhuayu/Downloads/DOHMH_New_York_City_Restaurant_Inspection_Results.csv", header = TRUE)
load('~/EDAV/data/data.RData')
library(tidyverse)
library(gridExtra)
library(dplyr)
library(ggplot2)
keep_cols <- c('DBA', 'BORO', 'ZIPCODE','CUISINE.DESCRIPTION','INSPECTION.DATE','VIOLATION.CODE','SCORE', 'GRADE','INSPECTION.TYPE','GRADE.DATE')
df <- data %>% select(keep_cols)
# remove new restaurants and restaurants with no scores
df <- filter(df,INSPECTION.DATE != '1/1/1900')
df <- filter(df,!is.na(SCORE))
df <- filter(df, `INSPECTION.TYPE`=="Cycle Inspection / Initial Inspection" | `INSPECTION.TYPE` == "Pre-permit (Operational) / Initial Inspection" | `INSPECTION.TYPE`=="Cycle Inspection / Re-inspection" | `INSPECTION.TYPE` == "Pre-permit (Operational) / Re-inspection")
colnames(df) <- c("name", "boro", "zipcode", "cuisine", "inspection_date",
"violation_code", "score", "grade",
"inspection_type", "grade_date")
df <- df[!duplicated(df[c('name', 'inspection_date', 'grade')]),]
ggplot(filter(df,grade=='A'|grade=='B'|grade=='C'), aes(x=grade)) + geom_bar() + labs(title="Restaurant Grades")
skimr::skim(df$grade)
skimr::skim(df$grade)
convert_to_grade <- function(x){
if (x < 14){
return("A")
}
else if(x > 28){
return("C")
}
else {
return("B")
}
}
df$imp_grade <- sapply(df$score, convert_to_grade)
p1 <- ggplot(filter(df,grade=='A'|grade=='B'|grade=='C'), aes(x=grade)) + geom_bar() + labs(title="Restaurant Grades")
p2 <- ggplot(filter(df,(imp_grade=='A'|imp_grade=='B'|imp_grade=='C')&(inspection_type=="Cycle Inspection / Initial Inspection" | inspection_type== "Pre-permit (Operational) / Initial Inspection")), aes(x=imp_grade)) + geom_bar() + labs(title="Restaurant Grades at Initial Inspections",x="grade")
grid.arrange(p1, p2, nrow = 1)
df1 <- filter(df, grade=='A'|grade=='B'|grade=='C') %>% select(c('inspection_type','grade')) %>% group_by(grade) %>% summarise(Freq=n())
df1$imputation <- c("no")
df1$inspection <- c("both")
colnames(df1) <- c("grade","Freq","imputation","inspection")
#summarise(all_insp_df,sum(Freq))
df2 <- filter(df, grade=='A'|grade=='B'|grade=='C') %>% select(c('inspection_type','grade')) %>% filter(inspection_type=="Cycle Inspection / Initial Inspection" | inspection_type== "Pre-permit (Operational) / Initial Inspection") %>% group_by(grade) %>% summarise(Freq=n())
df2$imputation <- c("no")
df2$inspection <- c("initial")
colnames(df2) <- c("grade","Freq","imputation","inspection")
#summarise(all_insp_df,sum(Freq))
df3 <- filter(df, grade=='A'|grade=='B'|grade=='C') %>% select(c('inspection_type','grade')) %>% filter(inspection_type=="Cycle Inspection / Re-inspection" | inspection_type== "Pre-permit (Operational) / Re-inspection") %>% group_by(grade) %>% summarise(Freq=n())
df3$imputation <- c("no")
df3$inspection <- c("re")
colnames(df3) <- c("grade","Freq","imputation","inspection")
#summarise(all_insp_df,sum(Freq))
df4 <- df %>% select(c('inspection_type','imp_grade')) %>% group_by(imp_grade) %>% summarise(Freq=n())
df4$imputation <- c("yes")
df4$inspection <- c("both")
colnames(df4) <- c("grade","Freq","imputation","inspection")
#summarise(imp_insp_df,sum(Freq))
df5 <- df %>% select(c('inspection_type','imp_grade')) %>% filter(inspection_type=="Cycle Inspection / Initial Inspection" | inspection_type== "Pre-permit (Operational) / Initial Inspection") %>% group_by(imp_grade) %>% summarise(Freq=n())
df5$imputation <- c("yes")
df5$inspection <- c("initial")
colnames(df5) <- c("grade","Freq","imputation","inspection")
#summarise(init_insp_df,sum(Freq))
df6 <- df %>% select(c('inspection_type','imp_grade')) %>% filter(inspection_type=="Cycle Inspection / Re-inspection" | inspection_type== "Pre-permit (Operational) / Re-inspection") %>% group_by(imp_grade) %>% summarise(Freq=n())
df6$imputation <- c("yes")
df6$inspection <- c("re")
colnames(df6) <- c("grade","Freq","imputation","inspection")
#summarise(re_insp_df,sum(Freq))
df7 <- rbind(df1,df2,df3,df4,df5,df6)
df7 <- droplevels(df7)
df7$imputation <- as.factor(df7$imputation)
df7$inspection <- as.factor(df7$inspection)
vcd::mosaic(grade ~inspection+imputation,df7,main="Grade Distribution vs Inspection Type vs Imputation")
df_cuisine <- df[,c('name','cuisine','grade')]
df_cuisine <- df_cuisine %>% filter(grade=='A'|grade=='B'|grade=='C')
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% summarise(count_A=sum(grade == "A", na.rm = T),count_B=sum(grade == "B", na.rm = T),count_C=sum(grade == "C", na.rm = T))
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(total_count=count_A+count_B+count_C)
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(percentage_A=count_A/total_count)
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(percentage_B=count_B/total_count)
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(percentage_C=count_C/total_count)
library(knitr)
kable(arrange(df_cuisine, desc(`percentage_A`))[1:20,],caption = "Top 20 A Percentages")
instali.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages("kableExtra")
library(knitr)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
df_cuisine <- df[,c('name','cuisine','grade')]
df_cuisine <- df_cuisine %>% filter(grade=='A'|grade=='B'|grade=='C')
# pre-processing
#data = read.csv("/Users/shihhuayu/Downloads/DOHMH_New_York_City_Restaurant_Inspection_Results.csv", header = TRUE)
load('~/EDAV/data/data.RData')
library(tidyverse)
library(gridExtra)
library(dplyr)
library(ggplot2)
library(knitr)
library(tidyverse)
library(kableExtra)
keep_cols <- c('DBA', 'BORO', 'ZIPCODE','CUISINE.DESCRIPTION','INSPECTION.DATE','VIOLATION.CODE','SCORE', 'GRADE','INSPECTION.TYPE','GRADE.DATE')
df <- data %>% select(keep_cols)
# remove new restaurants and restaurants with no scores
df <- filter(df,INSPECTION.DATE != '1/1/1900')
df <- filter(df,!is.na(SCORE))
df <- filter(df, `INSPECTION.TYPE`=="Cycle Inspection / Initial Inspection" | `INSPECTION.TYPE` == "Pre-permit (Operational) / Initial Inspection" | `INSPECTION.TYPE`=="Cycle Inspection / Re-inspection" | `INSPECTION.TYPE` == "Pre-permit (Operational) / Re-inspection")
colnames(df) <- c("name", "boro", "zipcode", "cuisine", "inspection_date",
"violation_code", "score", "grade",
"inspection_type", "grade_date")
df <- df[!duplicated(df[c('name', 'inspection_date', 'grade')]),]
skimr::skim(df$grade)
convert_to_grade <- function(x){
if (x < 14){
return("A")
}
else if(x > 28){
return("C")
}
else {
return("B")
}
}
df$imp_grade <- sapply(df$score, convert_to_grade)
p1 <- ggplot(filter(df,grade=='A'|grade=='B'|grade=='C'), aes(x=grade)) + geom_bar() + labs(title="Restaurant Grades")
p2 <- ggplot(filter(df,(imp_grade=='A'|imp_grade=='B'|imp_grade=='C')&(inspection_type=="Cycle Inspection / Initial Inspection" | inspection_type== "Pre-permit (Operational) / Initial Inspection")), aes(x=imp_grade)) + geom_bar() + labs(title="Restaurant Grades at Initial Inspections",x="grade")
grid.arrange(p1, p2, nrow = 1)
df1 <- filter(df, grade=='A'|grade=='B'|grade=='C') %>% select(c('inspection_type','grade')) %>% group_by(grade) %>% summarise(Freq=n())
df1$imputation <- c("no")
df1$inspection <- c("both")
colnames(df1) <- c("grade","Freq","imputation","inspection")
#summarise(all_insp_df,sum(Freq))
df2 <- filter(df, grade=='A'|grade=='B'|grade=='C') %>% select(c('inspection_type','grade')) %>% filter(inspection_type=="Cycle Inspection / Initial Inspection" | inspection_type== "Pre-permit (Operational) / Initial Inspection") %>% group_by(grade) %>% summarise(Freq=n())
df2$imputation <- c("no")
df2$inspection <- c("initial")
colnames(df2) <- c("grade","Freq","imputation","inspection")
#summarise(all_insp_df,sum(Freq))
df3 <- filter(df, grade=='A'|grade=='B'|grade=='C') %>% select(c('inspection_type','grade')) %>% filter(inspection_type=="Cycle Inspection / Re-inspection" | inspection_type== "Pre-permit (Operational) / Re-inspection") %>% group_by(grade) %>% summarise(Freq=n())
df3$imputation <- c("no")
df3$inspection <- c("re")
colnames(df3) <- c("grade","Freq","imputation","inspection")
#summarise(all_insp_df,sum(Freq))
df4 <- df %>% select(c('inspection_type','imp_grade')) %>% group_by(imp_grade) %>% summarise(Freq=n())
df4$imputation <- c("yes")
df4$inspection <- c("both")
colnames(df4) <- c("grade","Freq","imputation","inspection")
#summarise(imp_insp_df,sum(Freq))
df5 <- df %>% select(c('inspection_type','imp_grade')) %>% filter(inspection_type=="Cycle Inspection / Initial Inspection" | inspection_type== "Pre-permit (Operational) / Initial Inspection") %>% group_by(imp_grade) %>% summarise(Freq=n())
df5$imputation <- c("yes")
df5$inspection <- c("initial")
colnames(df5) <- c("grade","Freq","imputation","inspection")
#summarise(init_insp_df,sum(Freq))
df6 <- df %>% select(c('inspection_type','imp_grade')) %>% filter(inspection_type=="Cycle Inspection / Re-inspection" | inspection_type== "Pre-permit (Operational) / Re-inspection") %>% group_by(imp_grade) %>% summarise(Freq=n())
df6$imputation <- c("yes")
df6$inspection <- c("re")
colnames(df6) <- c("grade","Freq","imputation","inspection")
#summarise(re_insp_df,sum(Freq))
df7 <- rbind(df1,df2,df3,df4,df5,df6)
df7 <- droplevels(df7)
df7$imputation <- as.factor(df7$imputation)
df7$inspection <- as.factor(df7$inspection)
vcd::mosaic(grade ~inspection+imputation,df7,main="Grade Distribution vs Inspection Type vs Imputation")
df_cuisine <- df[,c('name','cuisine','grade')]
df_cuisine <- df_cuisine %>% filter(grade=='A'|grade=='B'|grade=='C')
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% summarise(count_A=sum(grade == "A", na.rm = T),count_B=sum(grade == "B", na.rm = T),count_C=sum(grade == "C", na.rm = T))
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(total_count=count_A+count_B+count_C)
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(percentage_A=count_A/total_count)
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(percentage_B=count_B/total_count)
df_cuisine <- df_cuisine %>% group_by(cuisine) %>% mutate(percentage_C=count_C/total_count)
kable(arrange(df_cuisine, desc(`percentage_A`))[1:20,],caption = "Top 20 A Percentages")
kable(arrange(df_cuisine, desc(`percentage_C`))[1:20,],caption = "Top 20 C Percentages")
tidyv_cuisine <- df_cuisine[,c('cuisine','percentage_A','percentage_B','percentage_C','total_count')]
tidyv_cuisine <- tidyv_cuisine %>% rename(A = percentage_A,B = percentage_B,C = percentage_C)
tidyv_cuisine_top_counts <- arrange(tidyv_cuisine, desc(`total_count`))[1:20,]
tidyv_cuisine_top_counts$cuisine <- factor(tidyv_cuisine_top_counts$cuisine,
levels=tidyv_cuisine_top_counts$cuisine[order(-tidyv_cuisine_top_counts$A)])
levels(tidyv_cuisine_top_counts$cuisine)[levels(tidyv_cuisine_top_counts$cuisine)=="Latin (Cuban, Dominican, Puerto Rican, South & Central American)"] <- "Latin" # for better display
tidyv_cuisine_top_counts <- tidyv_cuisine_top_counts %>% gather(key=GradeType,value=Percentage,-cuisine,-total_count)
tidyv_cuisine_top_A <- arrange(tidyv_cuisine, desc(`A`))[1:20,]
tidyv_cuisine_top_A$cuisine <- factor(tidyv_cuisine_top_A$cuisine,
levels=tidyv_cuisine_top_A$cuisine[order(-tidyv_cuisine_top_A$A)])
tidyv_cuisine_top_A <- tidyv_cuisine_top_A %>% gather(key=GradeType,value=Percentage,-cuisine,-total_count)
tidyv_cuisine_top_C <- arrange(tidyv_cuisine, desc(`C`))[1:20,]
tidyv_cuisine_top_C$cuisine  <- factor(tidyv_cuisine_top_C$cuisine,
levels=tidyv_cuisine_top_C$cuisine[order(-tidyv_cuisine_top_C$C)])
levels(tidyv_cuisine_top_C$cuisine)[levels(tidyv_cuisine_top_C$cuisine)=="Latin (Cuban, Dominican, Puerto Rican, South & Central American)"] <- "Latin"
tidyv_cuisine_top_C <- tidyv_cuisine_top_C %>% gather(key=GradeType,value=Percentage,-cuisine,-total_count)
ggplot(tidyv_cuisine_top_counts, aes(x=cuisine,y=Percentage,fill=GradeType)) +
geom_bar(stat="identity") +
coord_flip()+labs(title="Top 20 Common Restaurants' Grade Percentages")
ggplot(tidyv_cuisine_top_A, aes(x=cuisine,y=Percentage,fill=GradeType)) +
geom_bar(stat="identity") +
coord_flip()+labs(title="Top 20 A Percentages")
ggplot(tidyv_cuisine_top_C, aes(x=cuisine,y=Percentage,fill=GradeType,order_by())) +
geom_bar(stat="identity") +
coord_flip()+labs(title="Top 20 C Percentages")
########Note: all plots are generated in two ways, plotly and ggplot
# To everyone running my code section [CAFE Mean Violation Score] the plot, for some reason, my ggplot library have some issue correctly plot it after I update ggplot2 from github. So currently I am using a trick [saving result to local and then read it as csv] to visualize the plot..
# there is coding redundency [a lot], which I could improve in the future =.=.
#########
library(dplyr)
library(ggplot2)
library(plotly)
library(zoo)
library(tidyverse)
library(readr)
library(vcd)
library(grid)
load('~/EDAV/data/data_s.RData')
# keep_cols <- c('DBA','BORO', 'ZIPCODE','CUISINE.DESCRIPTION','INSPECTION.DATE','VIOLATION.CODE','VIOLATION.DESCRIPTION','SCORE', 'GRADE','INSPECTION.TYPE')
# data[data==""] <- NA
#inspecttbl <- read.csv("data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv", header = T, sep=',', na.strings=c("NA","N/A",""), colClasses = "character")
# glimpse(inspecttbl)
#####Date######
inspecttbl$"INSPECTION.DATE"<-(as.Date(inspecttbl$'INSPECTION.DATE', "%m/%d/%Y"))
inspecttbl$"GRADE.DATE"<-(as.Date(inspecttbl$'GRADE.DATE', "%m/%d/%Y"))
inspecttbl$"RECORD.DATE"<-(as.Date(inspecttbl$'RECORD.DATE', "%m/%d/%Y"))
# class(inspecttbl$'RECORD.DATE')
##### DataFrame Conversion #######
inspecttbl$GRADE <- factor(inspecttbl$GRADE, levels = c("A", "B", "C", "Z", "Not Yet Graded"), ordered = TRUE)
inspecttbl$`CUISINE.DESCRIPTION` <- factor(inspecttbl$`CUISINE.DESCRIPTION`)
inspecttbl$`CRITICAL.FLAG` <-   factor(inspecttbl$`CRITICAL.FLAG`, levels = c("Critical", "Not Critical", "Not Applicable"), ordered = T)
inspecttbl$CAMIS <- as.numeric(inspecttbl$CAMIS)
inspecttbl$SCORE <- as.numeric(inspecttbl$SCORE)
###### Exploration ######
# No. of distinct restaurants
# n_distinct(inspecttbl$CAMIS)
# Data Cleaning -- remove inspection 1900
inspecttbl<-filter(inspecttbl, `INSPECTION.DATE` != "1900-01-01")
# range(inspecttbl$`INSPECTION.DATE`)
# Top 10 Resteraurants Ranked by Number of Critical Violation
# Regardless of type of violation
# group data
restaurant <- inspecttbl%>%group_by(INSPECTION.DATE, DBA, SCORE, GRADE, CRITICAL.FLAG,BORO, BUILDING, STREET, ZIPCODE)
# renaming DBA(doing business as usual) to restaurant
restaurant<- restaurant%>%rename( RESTAURANT = DBA)
# Count voilations according to restaurant and type of violation [~distinct] count the instances regardless of violation type per score, per restaurant, per date
count<-restaurant%>%summarise(count=n())
# select only critical violation
citical_count<-count%>%filter(CRITICAL.FLAG=='Critical')
# Find the worest restaurants by calculating the number of that violate with Grade C under critical situation
citical_count<-citical_count%>%filter(SCORE>27)%>%group_by(RESTAURANT,STREET)%>%mutate(violation_count=sum(count))
# order the data # restaurant the receives violates grade C most
res_critical_vio_count<-distinct(citical_count%>%select(STREET,RESTAURANT,violation_count)%>%arrange(desc(violation_count)))
result<-res_critical_vio_count[1:10,c(2,3)]
result$RESTAURANT<-reorder(result$RESTAURANT,result$violation_count)
g<-ggplot(result, aes(RESTAURANT, violation_count)) +
geom_bar(stat = 'identity',fill="tan2")  +
coord_flip()+
#xlabel,ylabel
labs(title="10 Worst Resteraurants Ranked by Number of \n Critical Violation ",x = "", y = "Critical Violation Count")
g
ggplotly(g,tooltip=c("x", "y"))
# restaurant have the highest violation score
# Define bad restaurants as violation  Score > 27 [Grade C] ~ 5 occurance of Grade C
citical_count_score<-citical_count%>%
filter(SCORE>27,count>5)%>%arrange(desc(SCORE))
result<-citical_count_score[1:10,c(2,3,10)]
result$RESTAURANT<-reorder(result$RESTAURANT,result$SCORE)
g<-ggplot(result, aes(RESTAURANT, SCORE)) +
geom_bar(stat = 'identity',fill="tan2")  +
coord_flip()+
#theme(text = element_text(size=10), axis.text.x = element_text(angle=45, vjust=1, color = "grey")) +
labs(title="Worst 10 Highest Violation Score Restaurant ",x = "", y = "Score")
ggplotly(g,tooltip=c("x", "y"))
g
# save the csv for google api
# csv<-citical_count_score
# write.csv(csv[1:15,c(1,4,2,3,10)], file = '/Users/Selina/Desktop/Visualization/EDAV-master/chart.csv',row.names = FALSE)
#### INSPECTION.TYPE Violation related####
# we focus on instore sanity check of the inspection#
# dis-regarding rows from initial inspections as grades and scores are not counted
gradables <- c("Cycle Inspection / Initial Inspection" , "Cycle Inspection / Re-inspection",
"Pre-permit (Operational) / Initial Inspection", "Pre-permit (Operational) / Re-inspection")
inspecttbl1 <- (filter(inspecttbl, `INSPECTION.TYPE` %in% gradables))
# critical score and inspection type of chain restaurant
# store per year average critical score variation
cafe<-inspecttbl1%>%filter(CUISINE.DESCRIPTION=="CafÃ©/Coffee/Tea")%>%mutate(year = format(INSPECTION.DATE, "%Y"))
STARBUCKS<-cafe[grep("STARBUCKS",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
STARBUCKS$DBA<-"STARBUCKS"
DUNKIN<-cafe[grep("DUNKIN*",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
DUNKIN$DBA<-"DUNKIN"
PICCOLO<-cafe[grep("PICCOLO*",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
PICCOLO$DBA<-"PICCOLO"
GREGORY<-cafe[grep("GREGORY'S COFFEE*",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
GREGORY$DBA<-"GREGORY"
score<-rbind(STARBUCKS,DUNKIN,GREGORY,PICCOLO)
score_boro<-score%>%filter(BORO=="MANHATTAN"|BORO=="QUEENS"|BORO=="BROOKLYN")
score_boro$DBA<-as.factor(score_boro$DBA)
csv<-score_boro
# change to local path
# write.csv(csv, file = 'YOURPATH',row.names = FALSE)
write.csv(csv, file = '/Users/Selina/Desktop/Visualization/EDAV-master/boro_mean.csv',row.names = FALSE)
#### INSPECTION.TYPE Violation related####
# we focus on instore sanity check of the inspection#
# dis-regarding rows from initial inspections as grades and scores are not counted
gradables <- c("Cycle Inspection / Initial Inspection" , "Cycle Inspection / Re-inspection",
"Pre-permit (Operational) / Initial Inspection", "Pre-permit (Operational) / Re-inspection")
inspecttbl1 <- (filter(inspecttbl, `INSPECTION.TYPE` %in% gradables))
# critical score and inspection type of chain restaurant
# store per year average critical score variation
cafe<-inspecttbl1%>%filter(CUISINE.DESCRIPTION=="CafÃ©/Coffee/Tea")%>%mutate(year = format(INSPECTION.DATE, "%Y"))
STARBUCKS<-cafe[grep("STARBUCKS",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
STARBUCKS$DBA<-"STARBUCKS"
DUNKIN<-cafe[grep("DUNKIN*",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
DUNKIN$DBA<-"DUNKIN"
PICCOLO<-cafe[grep("PICCOLO*",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
PICCOLO$DBA<-"PICCOLO"
GREGORY<-cafe[grep("GREGORY'S COFFEE*",cafe$DBA),]%>%group_by(year,BORO)%>%summarise(MEAN = mean(SCORE))
GREGORY$DBA<-"GREGORY"
score<-rbind(STARBUCKS,DUNKIN,GREGORY,PICCOLO)
score_boro<-score%>%filter(BORO=="MANHATTAN"|BORO=="QUEENS"|BORO=="BROOKLYN")
score_boro$DBA<-as.factor(score_boro$DBA)
csv<-score_boro
# change to local path
# write.csv(csv, file = 'YOURPATH',row.names = FALSE)
#write.csv(csv, file = '/Users/Selina/Desktop/Visualization/EDAV-master/boro_mean.csv',row.names = FALSE)
# csv <- read_csv("YOURPATH")
#csv <- read_csv("/Users/Selina/Desktop/Visualization/EDAV-master/boro_mean.csv")
g<-ggplot(csv, aes(x = year, y = MEAN, fill = DBA)) +
geom_col(position = "dodge") +
facet_grid(fct_relevel(score_boro$BORO,"MANHATTAN")~.) +
ggtitle("Mean Violation Score") +
theme_grey(16)
install.packages("ggthemes")
library(ggthemes)
g+ scale_colour_colorblind()
ggplotly(g,tooltip=c("x", "y"))
# CAFE common violation type
# edit
STARBUCKS_type<-inspecttbl1[ grep("STARBUCKS",inspecttbl1$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n()/2431)%>%arrange(desc(vio_freq))
STARBUCKS_type$DBA<-"STARBUCKS"
interm<-inspecttbl1[ grep("DUNKIN*",inspecttbl1$DBA),]
interm$DBA<-"DUNKIN"
DUNKIN_type<-interm%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n()/6004)%>%arrange(desc(vio_freq))
DUNKIN_type$DBA<-"DUNKIN"
PICCOLO_type<-inspecttbl1[ grep("PICCOLO*",inspecttbl1$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n()/339)%>%arrange(desc(vio_freq))
PICCOLO_type$DBA<-"PICCOLO"
GREGORY_type<-inspecttbl1[ grep("GREGORY'S COFFEE*",inspecttbl1$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n()/98)%>%arrange(desc(vio_freq))
GREGORY_type$DBA<-"GREGORY"
type<-rbind(STARBUCKS_type[1:5,], DUNKIN_type[1:5,],PICCOLO_type[1:5,],GREGORY_type[1:5,])
type$DBA<-factor(type$DBA)
type<- type%>%rename( ViolationCode = VIOLATION.CODE,frequency=vio_freq)
g<-ggplot(type, aes(x = ViolationCode, y = frequency)) +
geom_col(position = "dodge",fill="tan2") +
facet_grid(~ fct_relevel(type$DBA,"STARBUCKS"),scales = 'free')+
ggtitle("Most Frequent Violation Code for Cafes") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
theme_grey(16)
g
ggplotly(g,tooltip=c("x", "y"))
# select code c('10F','10B','08A')
# 08A vermin
# 04N flies
code<-inspecttbl1%>%filter(VIOLATION.CODE=='10F'|VIOLATION.CODE=='10B'|VIOLATION.CODE=='08A')%>%mutate(year = format(INSPECTION.DATE, "%Y"),month = format(INSPECTION.DATE, "%Y"))
STARBUCKS_type<-code[ grep("STARBUCKS",code$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n())%>%arrange(desc(vio_freq))
STARBUCKS_type$DBA<-"STARBUCKS"
DUNKIN_type<-code[ grep("DUNKIN*",code$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n())%>%arrange(desc(vio_freq))
DUNKIN_type$DBA<-"DUNKIN"
PICCOLO_type<-code[ grep("PICCOLO*",code$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n())%>%arrange(desc(vio_freq))
PICCOLO_type$DBA<-"PICCOLO"
GREGORY_type<-code[ grep("GREGORY'S COFFEE*",code$DBA),]%>%group_by(DBA,VIOLATION.CODE)%>%summarise(vio_freq=n())%>%arrange(desc(vio_freq))
GREGORY_type$DBA<-"GREGORY"
code<-rbind(STARBUCKS_type[1:5,], DUNKIN_type[1:5,],PICCOLO_type[1:5,],GREGORY_type[1:5,])
code$DBA<-factor(code$DBA)
code$DBA<-fct_relevel(code$DBA,"STARBUCKS")
# code$DBA<-fct_relevel(code$DBA,"PICCOLO", )
mosaic(VIOLATION.CODE ~ DBA, code, direction = c("v", "h"),labeling= labeling_border(rot_labels = c(15,0,0,0)),main="Violation Code Ratio of Cafes") #gp = gpar(fill = c("blue", "lightblue"),rot_labels=c(0,90,0,0),just_labels="right" )
#, labeling= labeling_border(rot_labels = c(0,90,0,0),
# just_labels = c("center",
#           "center",
#          "center",
#           "right"))
# per year/date
yearmonth<-inspecttbl1%>%filter(CUISINE.DESCRIPTION=="CafÃ©/Coffee/Tea")%>%mutate(yearmonth = format(INSPECTION.DATE, "%Y-%m"))
STARBUCKS<-yearmonth[grep("STARBUCKS",yearmonth$DBA),]%>%group_by(yearmonth)%>%filter(VIOLATION.CODE=="08A")%>%summarise(Score = mean(SCORE))
STARBUCKS$Date<-as.Date(as.yearmon(STARBUCKS$yearmonth, "%Y-%m"))
g<-ggplot(STARBUCKS) + geom_line(aes(Date, Score)) +
geom_point(aes(Date, Score))+
ggtitle("STARBUCKS Violation Score 08A Monthly Mean Score Variation") +
labs (x = "Month", y = "Score") +
theme_grey(16) +
theme(legend.title = element_blank())
g
p <- ggplotly(g, tooltip=c("x", "y"))
p
# per year/date
yearmonth<-inspecttbl1%>%filter(CUISINE.DESCRIPTION=="CafÃ©/Coffee/Tea")%>%mutate(yearmonth = format(INSPECTION.DATE, "%Y-%m"))
STARBUCKS<-yearmonth[grep("STARBUCKS",yearmonth$DBA),]%>%group_by(yearmonth)%>%filter(VIOLATION.CODE=="08A")%>%summarise(Score = mean(SCORE))
STARBUCKS$Date<-as.Date(as.yearmon(STARBUCKS$yearmonth, "%Y-%m"))
g<-ggplot(STARBUCKS) + geom_line(aes(Date, Score)) +
geom_point(aes(Date, Score))+
ggtitle("STARBUCKS Violation Score 08A Monthly Mean Score Variation") +
labs (x = "Month", y = "Score") +
theme_grey(16) +
theme(legend.title = element_blank())
p <- ggplotly(g, tooltip=c("x", "y"))
p
# analysis of area
CAFE<-inspecttbl1%>%filter(CUISINE.DESCRIPTION=="CafÃ©/Coffee/Tea")%>%mutate(year = format(INSPECTION.DATE, "%Y"))
STARBUCKS<-CAFE[grep("STARBUCKS",CAFE$DBA),]%>%group_by(BORO,year)%>%filter(VIOLATION.CODE=="08A")%>%summarise(Score = mean(SCORE))
STARBUCKS<-STARBUCKS%>%filter(year!="2018",year!="2014")
STARBUCKS$Boro<-reorder(STARBUCKS$BORO,STARBUCKS$Score)
g<-ggplot(STARBUCKS) +
geom_bar(aes(Boro, Score),stat = 'identity',fill="tan2")  +
facet_grid(~year)+
labs(title="Mean Violation Code 08A By BORO ",x = "NYC Borough", y = "08A Violation Score")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
g
ggplotly(g,tooltip=c("x", "y"))
# analysis of area
CAFE<-inspecttbl1%>%filter(CUISINE.DESCRIPTION=="CafÃ©/Coffee/Tea")%>%mutate(year = format(INSPECTION.DATE, "%Y"))
STARBUCKS<-CAFE[grep("STARBUCKS",CAFE$DBA),]%>%group_by(BORO,year)%>%filter(VIOLATION.CODE=="08A")%>%summarise(Score = mean(SCORE))
STARBUCKS<-STARBUCKS%>%filter(year!="2018",year!="2014")
STARBUCKS$Boro<-reorder(STARBUCKS$BORO,STARBUCKS$Score)
g<-ggplot(STARBUCKS) +
geom_bar(aes(Boro, Score),stat = 'identity',fill="tan2")  +
facet_grid(~year)+
labs(title="Mean Violation Code 08A By BORO ",x = "NYC Borough", y = "08A Violation Score")+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
g <- ggplotly(g,tooltip=c("x", "y"))
g
# restaurant have the highest violation score
# Define bad restaurants as violation  Score > 27 [Grade C] ~ 5 occurance of Grade C
citical_count_score<-citical_count%>%
filter(SCORE>27,count>5)%>%arrange(desc(SCORE))
result<-citical_count_score[1:10,c(2,3,10)]
result$RESTAURANT<-reorder(result$RESTAURANT,result$SCORE)
g<-ggplot(result, aes(RESTAURANT, SCORE)) +
geom_bar(stat = 'identity',fill="tan2")  +
coord_flip()+
#theme(text = element_text(size=10), axis.text.x = element_text(angle=45, vjust=1, color = "grey")) +
labs(title="Worst 10 Highest Violation Score Restaurant ",x = "", y = "Score")
g <- ggplotly(g,tooltip=c("x", "y"))
g
# save the csv for google api
# csv<-citical_count_score
# write.csv(csv[1:15,c(1,4,2,3,10)], file = '/Users/Selina/Desktop/Visualization/EDAV-master/chart.csv',row.names = FALSE)
# restaurant have the highest violation score
# Define bad restaurants as violation  Score > 27 [Grade C] ~ 5 occurance of Grade C
citical_count_score<-citical_count%>%
filter(SCORE>27,count>5)%>%arrange(desc(SCORE))
result<-citical_count_score[1:10,c(2,3,10)]
result$RESTAURANT<-reorder(result$RESTAURANT,result$SCORE)
g<-ggplot(result, aes(RESTAURANT, SCORE)) +
geom_bar(stat = 'identity',fill="tan2")  +
coord_flip()+
#theme(text = element_text(size=10), axis.text.x = element_text(angle=45, vjust=1, color = "grey")) +
labs(title="Worst 10 Highest Violation Score Restaurant ",x = "", y = "Score")
ggplotly(g,tooltip=c("x", "y"))
g
# save the csv for google api
# csv<-citical_count_score
# write.csv(csv[1:15,c(1,4,2,3,10)], file = '/Users/Selina/Desktop/Visualization/EDAV-master/chart.csv',row.names = FALSE)
# restaurant have the highest violation score
# Define bad restaurants as violation  Score > 27 [Grade C] ~ 5 occurance of Grade C
citical_count_score<-citical_count%>%
filter(SCORE>27,count>5)%>%arrange(desc(SCORE))
result<-citical_count_score[1:10,c(2,3,10)]
result$RESTAURANT<-reorder(result$RESTAURANT,result$SCORE)
g<-ggplot(result, aes(RESTAURANT, SCORE)) +
geom_bar(stat = 'identity',fill="tan2")  +
coord_flip()+
#theme(text = element_text(size=10), axis.text.x = element_text(angle=45, vjust=1, color = "grey")) +
labs(title="Worst 10 Highest Violation Score Restaurant ",x = "", y = "Score")
ggplotly(g)
#g
# save the csv for google api
# csv<-citical_count_score
# write.csv(csv[1:15,c(1,4,2,3,10)], file = '/Users/Selina/Desktop/Visualization/EDAV-master/chart.csv',row.names = FALSE)
